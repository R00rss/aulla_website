---
import GestureHintSwipe from "../common/GestureHintSwipe.astro";
import AnimalCard from "./AnimalCard.astro";
import { animals } from "@/constants/animals.constant";
---

<section class="wrapper-animal-collage relative overflow-hidden">
  <section class="mt-16 py-6 content-animal-collage relative">
    <GestureHintSwipe toRight />
    <section
      class="flex justify-start 3xl:justify-center items-center gap-2 sm:gap-10 animal-cards-container"
      id="animalCardsContainer"
    >
      {
        animals.map((animal, index) => (
          <AnimalCard
            title={animal.name}
            description="Max es un perro juguetón y amigable que busca un hogar lleno de amor."
            date="Disponible desde: 2023-10-01"
            rotateLeft={index % 2 === 0}
            classNameContainerImage="w-[220px] sm:w-[285px]"
            className="animal-card pointer-events-none"
            image={animal.image}
          />
        ))
      }
    </section>
  </section>
</section>

<style>
  .content-animal-collage::after {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 88%;
    background: linear-gradient(
      90deg,
      #ffffff 0%,
      #ffffff00 5%,
      #ffffff00 95%,
      #ffffff 100%
    );
    pointer-events: none;
    z-index: 10;
  }

  .wrapper-animal-collage::before {
    content: "";
    position: absolute;
    top: 91%;
    left: 0;
    width: 100%;
    height: 10%;
    background-color: var(--color-primary);
  }

  .content-animal-collage {
    cursor: grab;
    user-select: none;
    -webkit-user-select: none;
    -moz-user-select: none;
    -ms-user-select: none;
  }

  .content-animal-collage:active {
    cursor: grabbing;
  }

  .content-animal-collage.dragging {
    cursor: grabbing;
  }
</style>

<script>
  import { gsap } from "gsap";
  import { ScrollTrigger } from "gsap/ScrollTrigger";
  import { Draggable } from "gsap/Draggable";

  gsap.registerPlugin(ScrollTrigger, Draggable);

  const contentAnimalCollage = document.querySelector<HTMLElement>(
    ".content-animal-collage"
  );

  const animalsCards = document.querySelectorAll<HTMLElement>(".animal-card");

  const cardsContainer = document.querySelector<HTMLElement>(
    "#animalCardsContainer"
  );
  const firstCard = document.querySelector<HTMLElement>(".animal-card");
  const lastCard = document.querySelector<HTMLElement>(
    ".animal-card:last-child"
  );

  let isDragging = false;
  let initMouseX = 0;

  function initDraggable() {
    if (!contentAnimalCollage) return;

    contentAnimalCollage.addEventListener("mousedown", handleStart);
    document.addEventListener("mousemove", handleMove);
    document.addEventListener("mouseup", handleEnd);

    contentAnimalCollage.addEventListener("touchstart", handleStart, {
      passive: false,
    });

    document.addEventListener("touchmove", handleMove, { passive: false });
    document.addEventListener("touchend", handleEnd);
  }

  function handleStart(e: MouseEvent | TouchEvent) {
    isDragging = true;
    contentAnimalCollage?.classList.add("dragging");

    initMouseX = e instanceof MouseEvent ? e.clientX : e.touches[0].clientX;
    // gsap.globalTimeline.pause();
  }

  function handleMove(e: MouseEvent | TouchEvent) {
    if (isDragging) {
      if (!cardsContainer || !firstCard) return;

      const endMouseX =
        e instanceof MouseEvent ? e.clientX : e.touches[0].clientX;
      const deltaX = (endMouseX - initMouseX) * 0.75;

      const initX = firstCard.getBoundingClientRect().left;
      const finalX = initX + deltaX;

      const finalXNormalized = finalX;
      console.log({ finalXNormalized });
      gsap.to(cardsContainer, {
        x: finalXNormalized,
        // duration: 0.3,
        ease: "power3.out",
      });
    }
  }

  function handleEnd() {
    if (!isDragging) return;

    console.log("Drag ended");

    isDragging = false;
    contentAnimalCollage?.classList.remove("dragging");
    // gsap.globalTimeline.resume();

    setTimeout(() => validateCollageOffset(), 300);
  }

  function validateCollageOffset() {
    if (!cardsContainer || !firstCard || !lastCard) return;
    const MAX_OFFSET = 75;
    const screenWidth = window.innerWidth;
    const maxOffSetRight = screenWidth - MAX_OFFSET;
    const lastX = lastCard.getBoundingClientRect().right;
    const initX = firstCard.getBoundingClientRect().left;

    if (initX > MAX_OFFSET) {
      const delta = initX - MAX_OFFSET;
      const newFinal = initX - delta;
      gsap.to(cardsContainer, {
        x: newFinal,
        duration: 0.3,
        ease: "power3.out",
      });
    }

    if (lastX < maxOffSetRight) {
      const delta = screenWidth - lastX;
      const newFinal = initX + delta;
      gsap.to(cardsContainer, {
        x: newFinal,
        duration: 0.3,
        ease: "power3.out",
      });
    }
  }

  function init() {
    gsap.from(contentAnimalCollage, {
      x: 500,
      // opacity: 0,
      duration: 2,
      scrollTrigger: {
        trigger: contentAnimalCollage,
        start: "top 80%",
        toggleActions: "restart reverse restart reverse",
      },
    });

    for (let i = 0; i < animalsCards.length; i++) {
      const card = animalsCards[i];
      const degrees = i % 2 === 0 ? -2 : 2;
      gsap.from(card, {
        rotate: degrees,
        delay: 1,
        repeat: -1,
        yoyo: true,
        duration: 2,
        ease: "power1.inOut",
      });
    }
  }

  function scroll() {
    // Tu función scroll aquí si la tienes
  }

  function main() {
    init();
    initDraggable();
    // scroll();
  }

  document.addEventListener("DOMContentLoaded", main);
</script>
